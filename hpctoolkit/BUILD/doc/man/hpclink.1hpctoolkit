'\" t
.\" Manual page created with latex2man on Mon Nov 20 15:36:21 EST 2017
.\" NOTE: This file is generated, DO NOT EDIT.
.de Vb
.ft CW
.nf
..
.de Ve
.ft R

.fi
..
.TH "HPCLINK" "1" " 2011/09/19" "The HPCToolkit Performance Tools " "The HPCToolkit Performance Tools "
.SH NAME

.PP
hpclink
is used to link \fBHPCToolkit\fP\&'s
performance measurement library (\fIhpcrun\fP(1)
) into a statically linked application.
.PP
.SH SYNOPSIS

.PP
hpclink
[\fBoptions\fP]
\fIlink\-command\fP
.PP
.SH DESCRIPTION

.PP
hpclink
links HPCToolkit\&'s performance measurement library into a statically linked application. 
(\fIhpcrun\fP(1)
\&'s method for injecting its library into a dynamically linked application will not work with a statically linked applications.)
Although hpclink
does require a special link step, it requires neither source code modifications nor changes to compiling individual object files and libraries. 
.PP
To link with hpclink,
first locate the last step in your application\&'s build, that is, the command that produces the final, statically linked binary. 
Then, use this command as \fIlink\-command\fP\&.
One simple way of accomplishing this is to simply prepend the hpclink
command to the front of a Makefile\&'s link line. 
You may also wish to rename the binary name (\-o app\-hpclink).
.PP
To control HPCToolkit\&'s performance measurement library during an application\&'s execution, use the following environment variables: 
.PP
.TP
.B *
HPCRUN_EVENT_LIST=<event1>[@<period1>];...;<eventN>[@<periodN>]
.br 
Sample using \fIevent1\fP
through \fIeventN\fP
using the respective periods. 
Corresponds to \fIhpcrun\fP(1)
\&'s \-e/\-\-event option.
.PP
.TP
.B *
HPCRUN_TRACE=1
.br 
Enable tracing. 
Corresponds to \fIhpcrun\fP(1)
\&'s \-t/\-\-trace option.
.PP
.TP
.B *
HPCRUN_PROCESS_FRACTION=<frac>
.br 
Measure only a fraction \fIfrac\fP
of the execution\&'s processses. 
For each process, enable measurement with probability \fIfrac\fP,
where \fIfrac\fP
is a real number (0.10) or a fraction (1/10) between 0 and 1. 
Corresponds to \fIhpcrun\fP(1)
\&'s \-f/\-fp/\-\-process\-fraction option.
.PP
.TP
.B *
HPCRUN_OUT_PATH=<outpath>
.br 
Corresponds to \fIhpcrun\fP(1)
\&'s \-o/\-\-output option.
.PP
.SH ARGUMENTS

.PP
.TP
\fIlink\-command\fP
 The link command for producing a statically linked application binary. 
It typically has the following form:
.br
\fB \fP\fB \fP\fB \fP\fIcompiler\fP
\fI[link\-options]\fP
\fIobject\-files\fP
\fIlibraries\fP
.PP
.SS OPTIONS: INFORMATIONAL
.PP
.TP
\fB\-v\fP, \fB\-\-verbose\fP
 Verbose. Displays the original and modified command lines. 
.PP
.TP
\fB\-V\fP, \fB\-\-version\fP
 Print version information. 
.PP
.TP
\fB\-h\fP, \fB\-\-help\fP
 Print help. 
.PP
.SS OPTIONS: LINKING
.PP
.TP
\fB\-\-memleak\fP
 Include HPCToolkit\&'s memory leak detection libraries. 
.PP
.TP
\fB\-u\fP \fIsymbol\fP, \fB\-\-undefined\fP \fIsymbol\fP
 Pass \fIsymbol\fP
to the linker as an undefined symbol. 
This option is rarely needed, but if hpclink
fails with an undefined reference to __real_foo,
then the option ``\-u foo\&''
may induce the linker to correctly link this symbol. 
May be used multiple times. 
.PP
.SH EXAMPLES

.PP
Compile the ``hello, world\&'' program with gcc
and link in the 
hpcrun
code statically. 
.PP
.Vb
    hpclink gcc \-o hello \-g \-O \-static hello.c
.Ve
Link an hpcrun\-enabled
application from object files and the 
math library. 
.PP
.Vb
    hpclink gcc \-o myprog \-static main.o foo.o ... \-lm
.Ve
Make both native and hpcrun\-enabled
versions of an application from object files and system libraries with the mpixlc
compiler. 
Note that the argument list to the hpclink
command is exactly the command to build the native version except for the name of the output file. 
.PP
.Vb
    mpixlc \-o myprog main.o foo.o ... \-lm \-lpthread
    hpclink mpixlc \-o myprog.hpc main.o foo.o ... \-lm \-lpthread
.Ve
.PP
.SH LAUNCHING STATIC PROGRAMS

.PP
For dynamically linked binaries, the hpcrun
script is used to launch programs and set environment variables, but on systems with separate compute nodes, this is often not available. 
In this case, the HPCRUN_EVENT_LIST
environment variable is used to pass the profiling events to the hpcrun
code. 
.PP
.Vb
    export HPCRUN_EVENT_LIST="PAPI_TOT_CYC@4000000"
    myprog arg ...
.Ve
For example, on a Cray XT system, you might launch a job with a PBS 
script such as the following. 
.PP
.Vb
    #!/bin/sh
    #PBS \-l size=64
    #PBS \-l walltime=01:00:00
    cd $PBS_O_WORKDIR
    export HPCRUN_EVENT_LIST="PAPI_TOT_CYC@4000000 PAPI_L2_TCM@400000"
    aprun \-n 64 ./myprog arg ...
.Ve
The IBM Blue Gene system uses the \-\-env
option to pass 
environment variables, so you might launch a job with a command 
such as the following. 
.PP
.Vb
    qsub \-t 60 \-n 64 \-\-env HPCRUN_EVENT_LIST="WALLCLOCK@1000" \\
        /path/to/myprog arg ...
.Ve
.PP
.SH NOTES

.PP
The command line passed to hpclink
must produce a statically linked binary and the hpclink
script will fail if it does not. 
.PP
With some compilers, eg, IBM\&'s XL compilers and the Pathscale compilers, interprocedural optimization interferes with hpclink\&'s
ability to link, causing hpclink
to fail. 
In this case, it is necessary to disable interprocedural optimization. 
It is not necessary to disable all optimization, just interprocedural analysis. 
.PP
.SH SEE ALSO

.PP
\fIhpctoolkit\fP(1)
\&.
.br
\fIhpcrun\fP(1)
\&.
.PP
.SH VERSION

.PP
Version: 2017.11 of  2011/09/19\&.
.PP
.SH LICENSE AND COPYRIGHT

.PP
.TP
Copyright 
(C)2002\-2017, Rice University. 
.TP
License 
See README.License\&.
.PP
.SH AUTHORS

.PP
Mark Krentel 
.br
Rice HPCToolkit Research Group 
.br
Email: \fBhpctoolkit\-forum =at= rice.edu\fP
.br
WWW: \fBhttp://hpctoolkit.org\fP\&.
.PP
.\" NOTE: This file is generated, DO NOT EDIT.
