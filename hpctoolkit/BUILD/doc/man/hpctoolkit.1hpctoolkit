'\" t
.\" Manual page created with latex2man on Mon Nov 20 15:36:21 EST 2017
.\" NOTE: This file is generated, DO NOT EDIT.
.de Vb
.ft CW
.nf
..
.de Ve
.ft R

.fi
..
.TH "HPCTOOLKIT" "1" " 2011/02/22" "The HPCToolkit Performance Tools " "The HPCToolkit Performance Tools "
.SH NAME

.PP
\fBHPCToolkit\fP
is a collection of performance analysis tools for node\-based performance analysis. 
It has been designed around the following principles: 
.PP
.TP
.B *
\fBLanguage independence.\fP
.TP
.B *
\fBAvoid code instrumentation.\fP
.TP
.B *
\fBAvoid blind spots.\fP
.TP
.B *
\fBContext is essential for understanding layered and object\-oriented software.\fP
.TP
.B *
\fBAny one performance measure produces a myopic view.\fP
.TP
.B *
\fBDerived performance metrics are essential for effective analysis.\fP
.TP
.B *
\fBPerformance analysis should be top down.\fP
.TP
.B *
\fBHierarchical aggregation is important in the face of approximate attribution.\fP
.TP
.B *
\fBWith instruction\-level parallelism, aggregate properties are vital.\fP
.TP
.B *
\fBMeasurement and analysis must be scalable.\fP
.PP
\fBHPCToolkit\fP\&'s
website (hpctoolkit.org)
contains papers that explain these design principles in more detail. 
.PP
.SH DESCRIPTION

.PP
.SS TOP\-DOWN ANALYSIS WITH CALLING CONTEXT AND PROGRAM STRUCTURE
.PP
A typical performance analysis session consists of: 
.TP
1.
\fBMeasurement.\fP
Collect low\-overhead, high\-accuracy profiles using statistical sampling. 
\fIhpcrun\fP(1)
collects call path profiles while \fIhpcrun\-flat\fP(1)
collects `flat\&' profiles (IP histograms, where IP is instruction pointer). 
\fIhpclink\fP(1)
is used to collect call path profiles for statically linked applications.
.PP
.TP
2.
\fBRecovering static source code structure.\fP
\fIhpcstruct\fP(1)
recovers static program structure such as procedures and loop nests.
It accounts for procedure and loop transformations such as inlining and software pipelining. 
Technically, this is an optional step, but critical information is lost without it. 
.PP
.TP
3.
\fBCorrelating dynamic profiles with static source code structure.\fP
\fBHPCToolkit\fP\&'s
correlation tool combines dynamic profile information with \fIhpcstruct\fP(1)
\&'s static program structure to correlate costs of the optimized object code to useful source code constructs such as loop nests.
The result of correlation is called an Experiment database. 
Currently, \fIhpcprof\fP(1)
is used for call stack profiles and \fIhpcprof\-flat\fP(1)
is used for flat profiles. 
.PP
.TP
4.
\fBTop\-down visualization\fP
\fIhpcviewer\fP(1)
is a Rich Client Platform\-based tool for presenting the resulting Experiment databases.
An important feature of the Experiment database is that it is relocatable, containing profile information and copies of application source files. 
This means that the first three steps can be performed remotely on a cluster and then the database can be viewed locally on a laptop or workstation. 
.PP
.SS TEXTUAL ANALYSIS
.PP
.TP
1.
\fBMeasurement.\fP
Collect low\-overhead, high\-accuracy `flat\&' profiles using statistical sampling (\fIhpcrun\-flat\fP(1)
).
.PP
.TP
2.
\fBRecovering static source code structure.\fP
\fIhpcstruct\fP(1)
is used for the same purpose described above.
.PP
.TP
3.
\fBCorrelating dynamic profiles with procedures source lines.\fP
\fIhpcproftt\fP(1)
correlates `flat\&' profiles with source structure and produces textual output.
.PP
.SH EXAMPLES

.PP
.SS INTERACTIVELY VISUALIZE CALL PATH OR FLAT PROFILES CORRELATED WITH PROGRAM STRUCTURE
.PP
Assume we have an application called \fIzoo\fP
whose source code is located in in path\-to\-zoo\&.
.PP
.TP
1.
\fBCompile\fP\&.
First compile and link the application normally with full optimization and as much debugging information as possible. 
Typically, this involves compiler options similar to \-O3 \-g\&. 
(See \fIhpcstruct\fP(1)
for options for specific compilers.)
.PP
.TP
2.
\fBMeasure\fP\&.
Profile with \fIhpcrun\fP(1)
or \fIhpcrun\-flat\fP(1)
\&.
Assume we wish to use two different sets of events. 
.Vb
  hpcrun[\-flat] <event\-set\-1> zoo
  hpcrun[\-flat] <event\-set\-2> zoo
.Ve
\fIhpcrun\fP(1)
will by default place the results in a measurement directory named hpctoolkit\-<app\-name>\-measurements\&.
\fIhpcrun\-flat\fP(1)
by default creates data files in the current directory; assume the results are placed in profile\-file\-1
and profile\-file\-2\&.
.PP
.TP
3.
\fBRecover static source code structure\fP\&.
Use \fIhpcstruct\fP(1)
to recover program structure and write it to the file zoo.hpcstruct
.Vb
  hpcstruct zoo
.Ve
.PP
.TP
4.
\fBCorrelate call path or flat metrics with static source code structure\fP\&.
Create an Experiment database using \fIhpcprof\fP(1)
or \fIhpcprof\-flat\fP(1)
\&.
(The version of \fIhpcprof\fP(1)
must match the version of \fIhpcrun\fP(1)
\&.)
Assume the generated Experiment database is named hpctoolkit\-database\&.
.Vb
  hpcprof \-I path\-to\-zoo/'*' \-S zoo.hpcstruct hpctoolkit\-zoo\-measurements
.Ve
or 
.Vb
  hpcprof\-flat \-I path\-to\-zoo/'*' \-S zoo.hpcstruct profile\-file\-1 profile\-file\-2
.Ve
.PP
.TP
5.
\fBVisualize\fP\&.
Visualize the Experiment database using \fIhpcviewer\fP(1)
:
.Vb
  hpcviewer hpctoolkit\-database
.Ve
Derived metrics may be computed on\-the\-fly with \fIhpcviewer\fP(1)
\&.
See \fIThe hpcviewer User Interface\fP
Guide for more information. 
.PP
.SS VISUALIZE TEXTUAL SUMMARIES OF FLAT PROFILES
.PP
Begin with steps 1\-\-3 above. 
.PP
.TP
.B *
\fBCorrelate metrics with static source code structure and generate textual summaries\fP\&.
Use \fIhpcproftt\fP(1)
\&.
.PP
To compute raw metrics for each native event and generate the default program and load module summaries: 
.Vb
  hpcproftt \-I path\-to\-zoo/'*' \-S zoo.hpcstruct profile\-file\-1 profile\-file\-2
.Ve
.PP
To compute raw and summary metrics (but only show the latter) and generate summaries for all program structure elements: 
.Vb
  hpcproftt \-\-src=sum \-\-metric=sum\-only \-I path\-to\-zoo/'*' \-S zoo.hpcstruct profile\-file\-1 profile\-file\-2
.Ve
.PP
To compute raw and summary metrics and generate summaries for all program structure elements and generate annotated source files: 
.Vb
  hpcproftt \-\-src=all \-\-metric=sum \-I path\-to\-zoo/'*' \-S zoo.hpcstruct profile\-file\-1 profile\-file\-2
.Ve
.PP
.SH SEE ALSO

.PP
\fIhpcrun\fP(1)
,
\fIhpclink\fP(1)
(\fIhpcrun\-flat\fP(1)
) 
.br
\fIhpcstruct\fP(1)
.br
\fIhpcprof\fP(1)
,
\fIhpcprof\-mpi\fP(1)
(\fIhpcprof\-flat\fP(1)
) 
.br
\fB \fP\fB \fP\fIhpcproftt\fP(1)
.br
\fB \fP\fB \fP\fIhpcsummary\fP(1)
.br
\fIhpcviewer\fP(1)
,
\fIhpctraceviewer\fP(1)
.PP
.SH VERSION

.PP
Version: 2017.11 of  2011/02/22\&.
.PP
.SH LICENSE AND COPYRIGHT

.PP
.TP
Copyright 
(C)2002\-2017, Rice University. 
.TP
License 
See README.License\&.
.PP
.SH AUTHORS

.PP
Email: \fBhpctoolkit\-forum =at= rice.edu\fP
.br
WWW: \fBhttp://hpctoolkit.org\fP\&.
.PP
.\" NOTE: This file is generated, DO NOT EDIT.
